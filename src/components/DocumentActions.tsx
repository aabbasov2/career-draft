'use client';

import React, { useState } from 'react';
import { ArrowDownTrayIcon, EnvelopeIcon } from '@heroicons/react/24/outline';
import { toast } from 'react-hot-toast';
import { useAuth } from '@/contexts/AuthContext';

type DocumentType = 'resume' | 'cover-letter';

interface DocumentActionsProps {
  content: string;
  type: DocumentType;
  onEmailSent?: () => void;
  isPaidUser?: boolean;
}

export default function DocumentActions({ content, type, onEmailSent, isPaidUser = false }: DocumentActionsProps) {
  const [isSending, setIsSending] = useState(false);
  const { user } = useAuth();

  const handleDownloadPDF = async () => {
    if (!isPaidUser) {
      toast.error('Please upgrade to a paid plan to download PDFs');
      return;
    }
    
    setIsSending(true);

    try {
      // Dynamically import html2pdf to avoid SSR issues
      const html2pdf = (await import('html2pdf.js')).default;
      
      // Create a container for the PDF content
      const element = document.createElement('div');
      element.innerHTML = `
        <div style="font-family: Arial, sans-serif; padding: 20px;">
          <div style="text-align: center; margin-bottom: 20px;">
            <h1 style="font-size: 24px; font-weight: bold;">${type === 'resume' ? 'Professional Resume' : 'Cover Letter'}</h1>
            <p style="color: #666; margin-top: 5px;">Generated by CareerDraft</p>
          </div>
          <div style="white-space: pre-wrap;">${content.replace(/\n/g, '<br>')}</div>
        </div>
      `;

      // PDF generation options
      const opt = {
        margin: 10,
        filename: `${type}-${new Date().toISOString().split('T')[0]}.pdf`,
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { 
          scale: 2,
          useCORS: true,
          logging: true
        },
        jsPDF: { 
          unit: 'mm', 
          format: 'a4', 
          orientation: 'portrait' 
        },
      };

      // Generate and download PDF
      const worker = html2pdf()
        .set(opt)
        .from(element);

      await new Promise<void>((resolve, reject) => {
        try {
          // @ts-ignore - save is not properly typed in the library
          worker.save().then(resolve).catch(reject);
        } catch (error) {
          reject(error);
        }
      });
      
      toast.success('PDF downloaded successfully!');
    } catch (error) {
      console.error('Error generating PDF:', error);
      toast.error('Failed to generate PDF. Please try again.');
    } finally {
      setIsSending(false);
    }
  };

  const handleEmailDocument = async () => {
    if (!isPaidUser) {
      toast.error('Please upgrade to a paid plan to email documents');
      return;
    }
    
    if (!user?.email) {
      toast.error('No email address found. Please sign in again.');
      return;
    }
    
    setIsSending(true);

    try {
      // First, generate the PDF
      const html2pdf = (await import('html2pdf.js')).default;
      const element = document.createElement('div');
      element.innerHTML = `
        <div style="font-family: Arial, sans-serif; padding: 20px;">
          <div style="text-align: center; margin-bottom: 20px;">
            <h1 style="font-size: 24px; font-weight: bold;">${type === 'resume' ? 'Professional Resume' : 'Cover Letter'}</h1>
            <p style="color: #666; margin-top: 5px;">Generated by CareerDraft</p>
          </div>
          <div style="white-space: pre-wrap;">${content.replace(/\n/g, '<br>')}</div>
        </div>
      `;

      // Generate PDF as blob
      const pdfBlob = await new Promise<Blob>((resolve, reject) => {
        try {
          const worker = html2pdf()
            .set({
              margin: 10,
              image: { type: 'jpeg', quality: 0.98 },
              html2canvas: { 
                scale: 2, 
                useCORS: true,
                logging: true,
                letterRendering: true
              },
              jsPDF: { 
                unit: 'mm', 
                format: 'a4', 
                orientation: 'portrait' 
              },
            })
            .from(element);
            
          // @ts-ignore - outputPdf is not in the type definitions but exists in the library
          worker.outputPdf('blob')
            .then(resolve)
            .catch(reject);
        } catch (error) {
          reject(error);
        }
      });

      // Convert blob to base64
      const base64Pdf = await new Promise<string>((resolve, reject) => {
        try {
          const reader = new FileReader();
          reader.onloadend = () => resolve(reader.result as string);
          reader.onerror = reject;
          reader.readAsDataURL(pdfBlob);
        } catch (error) {
          reject(error);
        }
      });

      // Send email with PDF attachment
      const response = await fetch('/api/send-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          to: user.email,
          subject: `Your ${type === 'resume' ? 'Resume' : 'Cover Letter'} from CareerDraft`,
          text: `Please find your ${type} attached.\n\nThank you for using CareerDraft!`,
          html: `
            <div>
              <h2>Your ${type === 'resume' ? 'Resume' : 'Cover Letter'}</h2>
              <p>Please find your ${type} attached.</p>
              <p>Thank you for using CareerDraft!</p>
            </div>
          `,
          attachments: [
            {
              content: base64Pdf.split(',')[1], // Remove the data URL prefix
              filename: `${type}-${new Date().toISOString().split('T')[0]}.pdf`,
              type: 'application/pdf',
              disposition: 'attachment',
            },
          ],
        }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Failed to send email');
      }

      const result = await response.json();
      
      if (result.previewUrl) {
        console.log('Email preview:', result.previewUrl);
        toast.success(
          <div>
            <p>{`${type === 'resume' ? 'Resume' : 'Cover letter'} sent to ${user.email}`}</p>
            {process.env.NODE_ENV === 'development' && (
              <a href={result.previewUrl} target="_blank" rel="noopener noreferrer" className="underline">
                View email preview (development only)
              </a>
            )}
          </div>
        );
      } else {
        toast.success(`${type === 'resume' ? 'Resume' : 'Cover letter'} sent to ${user.email}`);
      }
      
      onEmailSent?.();
    } catch (error: any) {
      console.error('Error sending email:', error);
      toast.error(error.message || 'Failed to send email. Please try again.');
    } finally {
      setIsSending(false);
    }
  };

  return (
    <div className="flex space-x-2 mt-4">
      <button
        onClick={handleDownloadPDF}
        className="flex items-center px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50"
        disabled={isSending}
      >
        <ArrowDownTrayIcon className="h-5 w-5 mr-2" />
        Download PDF
      </button>
      <button
        onClick={handleEmailDocument}
        className="flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded hover:bg-gray-50 disabled:opacity-50"
        disabled={isSending}
      >
        <EnvelopeIcon className="h-5 w-5 mr-2" />
        {isSending ? 'Sending...' : 'Email Me'}
      </button>
    </div>
  );
}
